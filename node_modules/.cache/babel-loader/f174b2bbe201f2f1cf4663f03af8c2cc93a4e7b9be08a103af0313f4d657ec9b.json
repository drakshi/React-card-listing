{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DRAKSHI\\\\OneDrive\\\\Documents\\\\Projects\\\\react-card-listing\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport CardList from './components/CardList';\nimport FilterDropdown from './components/FilterDropdown';\nimport SearchBar from './components/SearchBar';\nimport Tabs from './components/Tabs';\nimport mockData from './Data/mockData';\nimport Pages from './components/Pages';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [filteredCards, setFilteredCards] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterType, setFilterType] = useState('');\n  const [activeTab, setActiveTab] = useState('all');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [cardsPerPage] = useState(10);\n  useEffect(() => {\n    //fetching data on the first render(empty dependency array)\n    //     //if there would have been an api the code would have been looked like:\n    //     /*fetch('https://api_call')\n    //     .then(res=> res.json())\n    //     .then(data=>{\n    //         setCards(data)\n    //         setFilteredCards(data);\n    //     }) */\n    setCards(mockData.data);\n    setFilteredCards(mockData.data);\n  }, []);\n  useEffect(() => {\n    // Filtered cards based on search term (character that the user has entered to search) and card type\n\n    const filtered = cards.filter(card => {\n      const nameMatch = card.name.toLowerCase().includes(searchTerm.toLowerCase());\n      const typeMatch = filterType === '' || card.card_type === filterType;\n      return nameMatch && typeMatch;\n    });\n    setFilteredCards(filtered);\n  }, [cards, searchTerm, filterType]);\n  const handlePageChange = pageNumber => {\n    setCurrentPage(pageNumber);\n    console.log(pageNumber);\n  };\n  const handleSearchChange = event => {\n    setSearchTerm(event.target.value);\n  };\n  const handleFilterChange = event => {\n    setFilterType(event.target.value);\n  };\n  const handleTabChange = tab => {\n    //assumption : the \"your\" cards are the ones with owner_id = 1;\n    //     // Filtering cards based on owner_id when tab is clicked\n    setActiveTab(tab);\n    let filtered = [];\n    if (tab === 'Your') {\n      filtered = cards.filter(card => card.owner_id === 1);\n    } else if (tab === 'all') {\n      filtered = cards;\n    } else if (tab === 'blocked') {\n      filtered = cards.filter(card => card.status === 'blocked');\n    }\n    setFilteredCards(filtered);\n  };\n\n  // Get current cards based on pagination\n  const indexOfLastCard = currentPage * cardsPerPage;\n  const indexOfFirstCard = indexOfLastCard - cardsPerPage;\n  const currentCards = filteredCards.slice(indexOfFirstCard, indexOfLastCard);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Tabs, {\n      activeTab: activeTab,\n      onTabChange: handleTabChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FilterDropdown, {\n      filterType: filterType,\n      onChange: handleFilterChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      value: searchTerm,\n      onChange: handleSearchChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), currentCards.length > 0 ? /*#__PURE__*/_jsxDEV(CardList, {\n      cards: currentCards\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"card-message\",\n      children: \"No cards found...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Pages, {\n      totalCards: mockData.data.length,\n      perPage: mockData.per_page,\n      filteredCards: filteredCards,\n      onPageChange: handlePageChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"E2ZerrX3/warX1D57zvwtuWV2HU=\");\n_c = App;\nexport default App;\n\n// import React, { useState, useEffect } from 'react';\n// import CardList from './components/CardList';\n// import FilterDropdown from './components/FilterDropdown';\n// import SearchBar from './components/SearchBar';\n// import Tabs from './components/Tabs';\n// import mockData from './Data/mockData';\n\n// import './App.css';\n\n// const App = () => {\n//   const [cards, setCards] = useState([]);\n//   const [filteredCards, setFilteredCards] = useState([]);\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [filterType, setFilterType] = useState('');\n//   const [activeTab, setActiveTab] = useState('all');\n\n//   useEffect(() => {\n//     //fetching data on the first render(empty dependency array)\n//     //if there would have been an api the code would have been looked like:\n//     /*fetch('https://api_call')\n//     .then(res=> res.json())\n//     .then(data=>{\n//         setCards(data)\n//         setFilteredCards(data);\n//     }) */\n\n//     setCards(mockData.data);\n//     setFilteredCards(mockData.data);\n//   }, []);\n\n//   useEffect(() => {\n//     // Filtered cards based on search term (character that the user has entered to search) and card type\n//     const filtered = cards.filter((card) => {\n//       const nameMatch = card.name.toLowerCase().includes(searchTerm.toLowerCase());\n//       const typeMatch = filterType === '' || card.card_type === filterType;\n//       return nameMatch && typeMatch;\n//     });\n//     console.log(cards.length);\n//     setFilteredCards(filtered);\n//   }, [cards, searchTerm, filterType]);\n\n//   const handleSearchChange = (event) => {\n//     setSearchTerm(event.target.value);\n//   };\n\n//   const handleFilterChange = (event) => {\n//     setFilterType(event.target.value);\n//   };\n\n//   const handleTabChange = (tab) => {\n//     setActiveTab(tab);\n//     //assumption : the \"your\" cards are the ones with owner_id = 1;\n//     // Filtering cards based on owner_id when tab is clicked\n//     const filtered = cards.filter((card) => {\n//       if (tab === 'Your') {\n//         // Filtering cards belonging to the user (owner_id 1)\n//         return card.owner_id === 1;\n//       } else if (tab === 'all') {\n//         // Show all cards\n//         return true;\n//       } else if (tab === 'blocked') {\n//         // Filter cards with status 'blocked'\n//         return card.status === 'blocked';\n//       }\n//       return false;\n//     });\n\n//     setFilteredCards(filtered);\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <Tabs activeTab={activeTab} onTabChange={handleTabChange} />\n//       <FilterDropdown filterType={filterType} onChange={handleFilterChange} />\n//       <SearchBar value={searchTerm} onChange={handleSearchChange} />\n//       {filteredCards.length > 0 ? <CardList cards={filteredCards} /> : <p className='card-message'>No cards found...</p>}\n//     </div>\n//   );\n// };\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","CardList","FilterDropdown","SearchBar","Tabs","mockData","Pages","jsxDEV","_jsxDEV","App","_s","cards","setCards","filteredCards","setFilteredCards","searchTerm","setSearchTerm","filterType","setFilterType","activeTab","setActiveTab","currentPage","setCurrentPage","cardsPerPage","data","filtered","filter","card","nameMatch","name","toLowerCase","includes","typeMatch","card_type","handlePageChange","pageNumber","console","log","handleSearchChange","event","target","value","handleFilterChange","handleTabChange","tab","owner_id","status","indexOfLastCard","indexOfFirstCard","currentCards","slice","className","children","onTabChange","fileName","_jsxFileName","lineNumber","columnNumber","onChange","length","totalCards","perPage","per_page","onPageChange","_c","$RefreshReg$"],"sources":["C:/Users/DRAKSHI/OneDrive/Documents/Projects/react-card-listing/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport CardList from './components/CardList';\nimport FilterDropdown from './components/FilterDropdown';\nimport SearchBar from './components/SearchBar';\nimport Tabs from './components/Tabs';\nimport mockData from './Data/mockData';\nimport Pages from './components/Pages';\n\nimport './App.css';\n\nconst App = () => {\n  const [cards, setCards] = useState([]);\n  const [filteredCards, setFilteredCards] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterType, setFilterType] = useState('');\n  const [activeTab, setActiveTab] = useState('all');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [cardsPerPage] = useState(10);\n\n  useEffect(() => {\n    //fetching data on the first render(empty dependency array)\n//     //if there would have been an api the code would have been looked like:\n//     /*fetch('https://api_call')\n//     .then(res=> res.json())\n//     .then(data=>{\n//         setCards(data)\n//         setFilteredCards(data);\n//     }) */\n    setCards(mockData.data);\n    setFilteredCards(mockData.data);\n  }, []);\n\n  useEffect(() => {\n     // Filtered cards based on search term (character that the user has entered to search) and card type\n\n    const filtered = cards.filter((card) => {\n      const nameMatch = card.name.toLowerCase().includes(searchTerm.toLowerCase());\n      const typeMatch = filterType === '' || card.card_type === filterType;\n      return nameMatch && typeMatch;\n    });\n    setFilteredCards(filtered);\n  }, [cards, searchTerm, filterType]);\n\n  const handlePageChange = (pageNumber) => {\n    setCurrentPage(pageNumber);\n    console.log(pageNumber);\n  };\n\n  const handleSearchChange = (event) => {\n    setSearchTerm(event.target.value);\n  };\n\n  const handleFilterChange = (event) => {\n    setFilterType(event.target.value);\n  };\n\n  const handleTabChange = (tab) => {\n       //assumption : the \"your\" cards are the ones with owner_id = 1;\n//     // Filtering cards based on owner_id when tab is clicked\n    setActiveTab(tab);\n    let filtered = [];\n    if (tab === 'Your') {\n      filtered = cards.filter((card) => card.owner_id === 1);\n    } else if (tab === 'all') {\n      filtered = cards;\n    } else if (tab === 'blocked') {\n      filtered = cards.filter((card) => card.status === 'blocked');\n    }\n    setFilteredCards(filtered);\n  };\n\n  // Get current cards based on pagination\n  const indexOfLastCard = currentPage * cardsPerPage;\n  const indexOfFirstCard = indexOfLastCard - cardsPerPage;\n  const currentCards = filteredCards.slice(indexOfFirstCard, indexOfLastCard);\n\n\n  return (\n    <div className=\"App\">\n      <Tabs activeTab={activeTab} onTabChange={handleTabChange} />\n      <FilterDropdown filterType={filterType} onChange={handleFilterChange} />\n      <SearchBar value={searchTerm} onChange={handleSearchChange} />\n      {currentCards.length > 0 ? (\n        <CardList cards={currentCards} />\n      ) : (\n        <p className=\"card-message\">No cards found...</p>\n      )}\n      <Pages totalCards={mockData.data.length}\n        perPage={mockData.per_page}\n        filteredCards = {filteredCards}\n        onPageChange={handlePageChange} />\n    </div>\n  );\n};\n\nexport default App;\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import CardList from './components/CardList';\n// import FilterDropdown from './components/FilterDropdown';\n// import SearchBar from './components/SearchBar';\n// import Tabs from './components/Tabs';\n// import mockData from './Data/mockData';\n\n// import './App.css';\n\n// const App = () => {\n//   const [cards, setCards] = useState([]);\n//   const [filteredCards, setFilteredCards] = useState([]);\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [filterType, setFilterType] = useState('');\n//   const [activeTab, setActiveTab] = useState('all');\n\n//   useEffect(() => {\n//     //fetching data on the first render(empty dependency array)\n//     //if there would have been an api the code would have been looked like:\n//     /*fetch('https://api_call')\n//     .then(res=> res.json())\n//     .then(data=>{\n//         setCards(data)\n//         setFilteredCards(data);\n//     }) */\n\n//     setCards(mockData.data);\n//     setFilteredCards(mockData.data);\n//   }, []);\n\n//   useEffect(() => {\n//     // Filtered cards based on search term (character that the user has entered to search) and card type\n//     const filtered = cards.filter((card) => {\n//       const nameMatch = card.name.toLowerCase().includes(searchTerm.toLowerCase());\n//       const typeMatch = filterType === '' || card.card_type === filterType;\n//       return nameMatch && typeMatch;\n//     });\n//     console.log(cards.length);\n//     setFilteredCards(filtered);\n//   }, [cards, searchTerm, filterType]);\n\n//   const handleSearchChange = (event) => {\n//     setSearchTerm(event.target.value);\n//   };\n\n//   const handleFilterChange = (event) => {\n//     setFilterType(event.target.value);\n//   };\n\n//   const handleTabChange = (tab) => {\n//     setActiveTab(tab);\n//     //assumption : the \"your\" cards are the ones with owner_id = 1;\n//     // Filtering cards based on owner_id when tab is clicked\n//     const filtered = cards.filter((card) => {\n//       if (tab === 'Your') {\n//         // Filtering cards belonging to the user (owner_id 1)\n//         return card.owner_id === 1;\n//       } else if (tab === 'all') {\n//         // Show all cards\n//         return true;\n//       } else if (tab === 'blocked') {\n//         // Filter cards with status 'blocked'\n//         return card.status === 'blocked';\n//       }\n//       return false;\n//     });\n\n//     setFilteredCards(filtered);\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <Tabs activeTab={activeTab} onTabChange={handleTabChange} />\n//       <FilterDropdown filterType={filterType} onChange={handleFilterChange} />\n//       <SearchBar value={searchTerm} onChange={handleSearchChange} />\n//       {filteredCards.length > 0 ? <CardList cards={filteredCards} /> : <p className='card-message'>No cards found...</p>}\n//     </div>\n//   );\n// };\n\n// export default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}