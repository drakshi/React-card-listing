{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DRAKSHI\\\\OneDrive\\\\Documents\\\\Projects\\\\react-card-listing\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport CardList from './components/CardList';\nimport FilterDropdown from './components/FilterDropdown';\nimport SearchBar from './components/SearchBar';\nimport Tabs from './components/Tabs';\nimport mockData from './Data/mockData';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [filteredCards, setFilteredCards] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterType, setFilterType] = useState('');\n  const [activeTab, setActiveTab] = useState('Your');\n  const [page, setPage] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n  const containerRef = useRef(null);\n  useEffect(() => {\n    // Simulating API call to fetch initial data\n    // Replace with your actual API call\n    fetchCards();\n  }, []);\n  useEffect(() => {\n    // Filter cards based on search term and card type\n    const filtered = cards.filter(card => {\n      const nameMatch = card.name.toLowerCase().includes(searchTerm.toLowerCase());\n      const typeMatch = filterType === '' || card.card_type === filterType;\n      return nameMatch && typeMatch;\n    });\n    setFilteredCards(filtered);\n  }, [cards, searchTerm, filterType]);\n  useEffect(() => {\n    const observer = new IntersectionObserver(handleObserver, {\n      threshold: 1\n    });\n    if (containerRef.current) {\n      observer.observe(containerRef.current);\n    }\n    return () => {\n      if (containerRef.current) {\n        observer.unobserve(containerRef.current);\n      }\n    };\n  }, []);\n  const handleObserver = entries => {\n    const target = entries[0];\n    if (target.isIntersecting && !loading && hasMore) {\n      setPage(prevPage => prevPage + 1);\n    }\n  };\n  const fetchCards = () => {\n    setLoading(true);\n    // Simulating API call to fetch data\n    // Replace with your actual API call\n    const start = (page - 1) * 10;\n    const end = start + 10;\n    const newData = mockData.data.slice(start, end);\n    setTimeout(() => {\n      setCards(prevCards => [...prevCards, ...newData]);\n      setLoading(false);\n      if (end >= mockData.total) {\n        setHasMore(false);\n      }\n    }, 1000);\n  };\n  const handleSearchChange = event => {\n    setSearchTerm(event.target.value);\n  };\n  const handleFilterChange = event => {\n    setFilterType(event.target.value);\n  };\n  const handleTabChange = tab => {\n    setActiveTab(tab);\n    setPage(1); // Reset page when changing tabs\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Tabs, {\n      activeTab: activeTab,\n      onTabChange: handleTabChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FilterDropdown, {\n      filterType: filterType,\n      onChange: handleFilterChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      value: searchTerm,\n      onChange: handleSearchChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardList, {\n      cards: filteredCards\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 19\n    }, this), !loading && hasMore && /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      style: {\n        height: '10px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"WGT3BBK/ahP+URydr/W6EEcRmz8=\");\n_c = App;\nexport default App;\n\n// import React, { useState, useEffect } from 'react';\n// import CardList from './components/CardList';\n// import FilterDropdown from './components/FilterDropdown';\n// import SearchBar from './components/SearchBar';\n// import Tabs from './components/Tabs';\n// import mockData from './Data/mockData';\n\n// import './App.css';\n\n// const App = () => {\n//   const [cards, setCards] = useState([]);\n//   const [filteredCards, setFilteredCards] = useState([]);\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [filterType, setFilterType] = useState('');\n//   const [activeTab, setActiveTab] = useState('all');\n\n//   useEffect(() => {\n//     //fetching data on the first render(empty dependency array)\n//     //if there would have been an api the code would have been looked like:\n//     /*fetch('https://api_call')\n//     .then(res=> res.json())\n//     .then(data=>{\n//         setCards(data)\n//         setFilteredCards(data);\n//     }) */\n\n//     setCards(mockData.data);\n//     setFilteredCards(mockData.data);\n//   }, []);\n\n//   useEffect(() => {\n//     // Filtered cards based on search term (character that the user has entered to search) and card type\n//     const filtered = cards.filter((card) => {\n//       const nameMatch = card.name.toLowerCase().includes(searchTerm.toLowerCase());\n//       const typeMatch = filterType === '' || card.card_type === filterType;\n//       return nameMatch && typeMatch;\n//     });\n//     console.log(cards.length);\n//     setFilteredCards(filtered);\n//   }, [cards, searchTerm, filterType]);\n\n//   const handleSearchChange = (event) => {\n//     setSearchTerm(event.target.value);\n//   };\n\n//   const handleFilterChange = (event) => {\n//     setFilterType(event.target.value);\n//   };\n\n//   const handleTabChange = (tab) => {\n//     setActiveTab(tab);\n//     //assumption : the \"your\" cards are the ones with owner_id = 1;\n//     // Filtering cards based on owner_id when tab is clicked\n//     const filtered = cards.filter((card) => {\n//       if (tab === 'Your') {\n//         // Filtering cards belonging to the user (owner_id 1)\n//         return card.owner_id === 1;\n//       } else if (tab === 'all') {\n//         // Show all cards\n//         return true;\n//       } else if (tab === 'blocked') {\n//         // Filter cards with status 'blocked'\n//         return card.status === 'blocked';\n//       }\n//       return false;\n//     });\n\n//     setFilteredCards(filtered);\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <Tabs activeTab={activeTab} onTabChange={handleTabChange} />\n//       <FilterDropdown filterType={filterType} onChange={handleFilterChange} />\n//       <SearchBar value={searchTerm} onChange={handleSearchChange} />\n//       {filteredCards.length > 0 ? <CardList cards={filteredCards} />: <p className='card-message'>No cards found...</p>}\n//     </div>\n//   );\n// };\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","CardList","FilterDropdown","SearchBar","Tabs","mockData","jsxDEV","_jsxDEV","App","_s","cards","setCards","filteredCards","setFilteredCards","searchTerm","setSearchTerm","filterType","setFilterType","activeTab","setActiveTab","page","setPage","loading","setLoading","hasMore","setHasMore","containerRef","fetchCards","filtered","filter","card","nameMatch","name","toLowerCase","includes","typeMatch","card_type","observer","IntersectionObserver","handleObserver","threshold","current","observe","unobserve","entries","target","isIntersecting","prevPage","start","end","newData","data","slice","setTimeout","prevCards","total","handleSearchChange","event","value","handleFilterChange","handleTabChange","tab","className","children","onTabChange","fileName","_jsxFileName","lineNumber","columnNumber","onChange","ref","style","height","_c","$RefreshReg$"],"sources":["C:/Users/DRAKSHI/OneDrive/Documents/Projects/react-card-listing/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport CardList from './components/CardList';\nimport FilterDropdown from './components/FilterDropdown';\nimport SearchBar from './components/SearchBar';\nimport Tabs from './components/Tabs';\nimport mockData from './Data/mockData';\n\nimport './App.css';\n\nconst App = () => {\n  const [cards, setCards] = useState([]);\n  const [filteredCards, setFilteredCards] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterType, setFilterType] = useState('');\n  const [activeTab, setActiveTab] = useState('Your');\n  const [page, setPage] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    // Simulating API call to fetch initial data\n    // Replace with your actual API call\n    fetchCards();\n  }, []);\n\n  useEffect(() => {\n    // Filter cards based on search term and card type\n    const filtered = cards.filter((card) => {\n      const nameMatch = card.name.toLowerCase().includes(searchTerm.toLowerCase());\n      const typeMatch = filterType === '' || card.card_type === filterType;\n      return nameMatch && typeMatch;\n    });\n    setFilteredCards(filtered);\n  }, [cards, searchTerm, filterType]);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(handleObserver, { threshold: 1 });\n    if (containerRef.current) {\n      observer.observe(containerRef.current);\n    }\n    return () => {\n      if (containerRef.current) {\n        observer.unobserve(containerRef.current);\n      }\n    };\n  }, []);\n\n  const handleObserver = (entries) => {\n    const target = entries[0];\n    if (target.isIntersecting && !loading && hasMore) {\n      setPage((prevPage) => prevPage + 1);\n    }\n  };\n\n  const fetchCards = () => {\n    setLoading(true);\n    // Simulating API call to fetch data\n    // Replace with your actual API call\n    const start = (page - 1) * 10;\n    const end = start + 10;\n    const newData = mockData.data.slice(start, end);\n\n    setTimeout(() => {\n      setCards((prevCards) => [...prevCards, ...newData]);\n      setLoading(false);\n      if (end >= mockData.total) {\n        setHasMore(false);\n      }\n    }, 1000);\n  };\n\n  const handleSearchChange = (event) => {\n    setSearchTerm(event.target.value);\n  };\n\n  const handleFilterChange = (event) => {\n    setFilterType(event.target.value);\n  };\n\n  const handleTabChange = (tab) => {\n    setActiveTab(tab);\n    setPage(1); // Reset page when changing tabs\n  };\n\n  return (\n    <div className=\"App\">\n      <Tabs activeTab={activeTab} onTabChange={handleTabChange} />\n      <FilterDropdown filterType={filterType} onChange={handleFilterChange} />\n      <SearchBar value={searchTerm} onChange={handleSearchChange} />\n      <CardList cards={filteredCards} />\n      {loading && <div>Loading...</div>}\n      {!loading && hasMore && (\n        <div ref={containerRef} style={{ height: '10px' }}></div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n\n\n// import React, { useState, useEffect } from 'react';\n// import CardList from './components/CardList';\n// import FilterDropdown from './components/FilterDropdown';\n// import SearchBar from './components/SearchBar';\n// import Tabs from './components/Tabs';\n// import mockData from './Data/mockData';\n\n// import './App.css';\n\n// const App = () => {\n//   const [cards, setCards] = useState([]);\n//   const [filteredCards, setFilteredCards] = useState([]);\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [filterType, setFilterType] = useState('');\n//   const [activeTab, setActiveTab] = useState('all');\n\n//   useEffect(() => {\n//     //fetching data on the first render(empty dependency array)\n//     //if there would have been an api the code would have been looked like:\n//     /*fetch('https://api_call')\n//     .then(res=> res.json())\n//     .then(data=>{\n//         setCards(data)\n//         setFilteredCards(data);\n//     }) */\n    \n//     setCards(mockData.data);\n//     setFilteredCards(mockData.data);\n//   }, []);\n\n//   useEffect(() => {\n//     // Filtered cards based on search term (character that the user has entered to search) and card type\n//     const filtered = cards.filter((card) => {\n//       const nameMatch = card.name.toLowerCase().includes(searchTerm.toLowerCase());\n//       const typeMatch = filterType === '' || card.card_type === filterType;\n//       return nameMatch && typeMatch;\n//     });\n//     console.log(cards.length);\n//     setFilteredCards(filtered);\n//   }, [cards, searchTerm, filterType]);\n\n//   const handleSearchChange = (event) => {\n//     setSearchTerm(event.target.value);\n//   };\n\n//   const handleFilterChange = (event) => {\n//     setFilterType(event.target.value);\n//   };\n\n//   const handleTabChange = (tab) => {\n//     setActiveTab(tab);\n//     //assumption : the \"your\" cards are the ones with owner_id = 1;\n//     // Filtering cards based on owner_id when tab is clicked\n//     const filtered = cards.filter((card) => {\n//       if (tab === 'Your') {\n//         // Filtering cards belonging to the user (owner_id 1)\n//         return card.owner_id === 1;\n//       } else if (tab === 'all') {\n//         // Show all cards\n//         return true;\n//       } else if (tab === 'blocked') {\n//         // Filter cards with status 'blocked'\n//         return card.status === 'blocked';\n//       }\n//       return false;\n//     });\n\n//     setFilteredCards(filtered);\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <Tabs activeTab={activeTab} onTabChange={handleTabChange} />\n//       <FilterDropdown filterType={filterType} onChange={handleFilterChange} />\n//       <SearchBar value={searchTerm} onChange={handleSearchChange} />\n//       {filteredCards.length > 0 ? <CardList cards={filteredCards} />: <p className='card-message'>No cards found...</p>}\n//     </div>\n//   );\n// };\n\n// export default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}